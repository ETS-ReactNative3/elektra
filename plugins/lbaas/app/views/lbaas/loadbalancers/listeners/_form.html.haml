%fieldset
  = f.input :name, required: false
  = f.input :description
  = f.input :protocol_port, { readonly: update,
                              label: 'Protocol Port',
                              hint: 'A port number between 1 and 65535',
                              input_html: { type: :number, min: 1, max: 65535 }}
  = f.input :protocol, as: :select, collection: Lbaas::Listener::PROTOCOLS, disabled: update
  = f.input :default_pool_id, as: :select, collection: @pools, label_method: -> p {name_or_id(p.name, p.id)}
  = f.input :connection_limit, { label: 'Connection Limit',
                                 hint: 'Value -1 means infinite connections are allowed.',
                                 input_html: { type: :number, min: -1 , value: @listener.connection_limit || -1 }}
  = f.input :insert_headers, { wrapper_html: {class: ("hidden" if @listener.protocol == 'TCP' || @listener.protocol == 'UDP' || @listener.protocol == nil)}, as: :select, selected: @insert_headers, label: 'Insert Headers', collection: (Lbaas::Listener::INSERT_HEADERS[@listener.protocol] if @listener.protocol), input_html: { id: 'input_headers', multiple: true } }
  = f.input :tags, { input_html: { value: ( @listener.tags.join(', ') if !@listener.tags.blank? ) }, hint: 'Enter a comma separated list of strings' }
  = f.input :default_tls_container_ref, { wrapper_html: {class: ("hidden" unless @listener.protocol == 'TERMINATED_HTTPS')}, as: :select, label: 'Certificate Container', collection: @containers, include_blank: true }
  %div
    = f.input :sni_container_refs, { wrapper_html: {class: ("hidden" unless @listener.protocol == 'TERMINATED_HTTPS')}, as: :select, label: 'SNI Containers ', collection: @containers, include_blank: false, input_html: { id: 'sni_container_refs', multiple: true} }
  %div
    = f.input :client_authentication, { wrapper_html: {class: ("hidden" unless @listener.protocol == 'TERMINATED_HTTPS')},as: :select, label: 'Client Authentication Mode', collection: Lbaas::Listener::CLIENT_AUTHENTICATION, selected: (@listener.client_authentication if @listener.client_authentication)}
    = f.input :client_ca_tls_container_ref, { wrapper_html: {class: ("hidden" unless @listener.protocol == 'TERMINATED_HTTPS')}, as: :select, label: 'Client Authentication Container', collection: @containers, include_blank: true }


=content_for :javascripts do
  :javascript
    $(document).ready(function() {
      $('#sni_container_refs').multiselect();
      //$('#input_headers').multiselect();
    });